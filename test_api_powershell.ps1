# Test de l'API Backend avec PowerShell
# Ex√©cuter ce script dans PowerShell

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "üîç Test de l'API Backend" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Test 1: Connexion de base
Write-Host "1. üåê Test de connexion de base..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/demandes/document-types" -Method Get -TimeoutSec 10
    Write-Host "‚úÖ Connexion r√©ussie - Types de documents charg√©s: $($response.Count)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur de connexion: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 2: Authentification
Write-Host "2. üîê Test d'authentification..." -ForegroundColor Yellow
try {
    $loginData = @{
        email = "admin@econsulat.com"
        password = "admin123"
    } | ConvertTo-Json

    $headers = @{
        "Content-Type" = "application/json"
    }

    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/auth/login" -Method Post -Body $loginData -Headers $headers -TimeoutSec 10
    
    if ($response.token) {
        Write-Host "‚úÖ Authentification r√©ussie - Token re√ßu" -ForegroundColor Green
        $token = $response.token
        
        # Test 3: Donn√©es de r√©f√©rence avec token
        Write-Host ""
        Write-Host "3. üìã Test des donn√©es de r√©f√©rence..." -ForegroundColor Yellow
        
        $authHeaders = @{
            "Authorization" = "Bearer $token"
            "Content-Type" = "application/json"
        }
        
        try {
            $civilites = Invoke-RestMethod -Uri "http://localhost:8080/api/demandes/civilites" -Method Get -Headers $authHeaders -TimeoutSec 10
            Write-Host "‚úÖ Civilit√©s charg√©es: $($civilites.Count)" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur civilit√©s: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        try {
            $pays = Invoke-RestMethod -Uri "http://localhost:8080/api/demandes/pays" -Method Get -Headers $authHeaders -TimeoutSec 10
            Write-Host "‚úÖ Pays charg√©s: $($pays.Count)" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur pays: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        try {
            $types = Invoke-RestMethod -Uri "http://localhost:8080/api/demandes/document-types" -Method Get -Headers $authHeaders -TimeoutSec 10
            Write-Host "‚úÖ Types de documents charg√©s: $($types.Count)" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur types: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        # Test 4: Cr√©ation de demande
        Write-Host ""
        Write-Host "4. üìù Test de cr√©ation de demande..." -ForegroundColor Yellow
        
        $testDemande = @{
            civiliteId = 1
            firstName = "Test"
            lastName = "Utilisateur"
            birthDate = "1990-01-01"
            birthPlace = "Paris"
            birthCountryId = 1
            streetName = "Rue de Test"
            streetNumber = "123"
            boxNumber = ""
            postalCode = "75001"
            city = "Paris"
            countryId = 1
            fatherFirstName = "Jean"
            fatherLastName = "Utilisateur"
            fatherBirthDate = "1960-01-01"
            fatherBirthPlace = "Lyon"
            fatherBirthCountryId = 1
            motherFirstName = "Marie"
            motherLastName = "Utilisateur"
            motherBirthDate = "1965-01-01"
            motherBirthPlace = "Marseille"
            motherBirthCountryId = 1
            documentTypeId = 1
            documentFiles = @()
        } | ConvertTo-Json
        
        try {
            $response = Invoke-RestMethod -Uri "http://localhost:8080/api/demandes" -Method Post -Body $testDemande -Headers $authHeaders -TimeoutSec 10
            Write-Host "‚úÖ Demande cr√©√©e avec succ√®s! ID: $($response.id)" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur cr√©ation demande: $($_.Exception.Message)" -ForegroundColor Red
        }
        
    } else {
        Write-Host "‚ùå Pas de token re√ßu" -ForegroundColor Red
    }
    
} catch {
    Write-Host "‚ùå Erreur d'authentification: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "üìã R√©sum√© des Tests" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Si des tests √©chouent, v√©rifiez que:" -ForegroundColor Yellow
Write-Host "1. Le backend est d√©marr√© sur le port 8080" -ForegroundColor White
Write-Host "2. La base de donn√©es est accessible" -ForegroundColor White
Write-Host "3. Les donn√©es de r√©f√©rence existent (civilit√©s, pays, types)" -ForegroundColor White
Write-Host ""
Write-Host "Pour red√©marrer le backend: restart_with_cors_fix.bat" -ForegroundColor Green
Write-Host ""

Read-Host "Appuyez sur Entr√©e pour continuer..."
